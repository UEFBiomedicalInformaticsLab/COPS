% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering_pipeline.R
\name{get_best_result}
\alias{get_best_result}
\alias{clusteval_scoring}
\title{Scoring of dimensionality reduction and clustering pipeline output}
\usage{
get_best_result(res, scores)

clusteval_scoring(
  res,
  by = c("datname", "drname", "k", "m"),
  wsum = TrainStabilityJaccard + Silhouette,
  chisq_significance_level = 0.05,
  summarise = TRUE
)
}
\arguments{
\item{res}{\code{\link{dimred_clusteval_pipeline}} output}

\item{scores}{scores from \code{\link{clusteval_scoring}}}

\item{by}{character vector containing column names to group analysis by}

\item{wsum}{an expression that indicates how a combined score is computed}

\item{chisq_significance_level}{p-value cutoff for computing rejection rate of \code{chisq.test}}

\item{summarise}{If FALSE, adds \code{"run"} and \code{"fold"} to \code{by}. By default the metrics 
are averaged across runs and folds.}
}
\value{
Returns a \code{list} containing a \code{data.frame} \code{$all} of all scores and
        a single row \code{$best} with the best score according to \code{wsum}.
}
\description{
Computes averages of metrics from pipeline output and also returns the
best combination based on a weighted sum of metrics.
}
\details{
Metrics are renamed for convenience: 
\itemize{
  \item [Train/Test]Stability[Jaccard/ARI/NMI]
  \item [NMI/ARI/ChisqRR].<batch>
  \item [NMI/ARI].<subtype>
  \item ...
}
}
\section{Functions}{
\itemize{
\item \code{get_best_result}: Retrieves best clustering from CV results based on scores. 
In practice retrieves reference fold result from first run matching the best results.
}}

\examples{
library(COPS)
library(parallel)

res <- dimred_clusteval_pipeline(ad_ge_micro_zscore, 
batch_label = ad_studies, 
parallel = 2, nruns = 2, nfolds = 5, 
dimred_methods = c("pca", "umap", "tsne"), 
cluster_methods = c("hierarchical", "kmeans"), 
metric = "euclidean",
n_clusters = 2:4)

scores <- clusteval_scoring(res, wsum = Silhouette - batch_label.nmi, summarise = TRUE)

best <- get_best_result(res, scores)
head(best$embedding)
head(best$clusters)

}
